// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/AjxGnx/software-engineer-exercise/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NumberCategorization is an autogenerated mock type for the NumberCategorization type
type NumberCategorization struct {
	mock.Mock
}

// Get provides a mock function with given fields: page, limit
func (_m *NumberCategorization) Get(page int, limit int) (*entity.Paginator, error) {
	ret := _m.Called(page, limit)

	var r0 *entity.Paginator
	if rf, ok := ret.Get(0).(func(int, int) *entity.Paginator); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNumber provides a mock function with given fields: number
func (_m *NumberCategorization) GetByNumber(number int64) (entity.Categorization, error) {
	ret := _m.Called(number)

	var r0 entity.Categorization
	if rf, ok := ret.Get(0).(func(int64) entity.Categorization); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Get(0).(entity.Categorization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: categorization
func (_m *NumberCategorization) Insert(categorization entity.Categorization) (entity.Categorization, error) {
	ret := _m.Called(categorization)

	var r0 entity.Categorization
	if rf, ok := ret.Get(0).(func(entity.Categorization) entity.Categorization); ok {
		r0 = rf(categorization)
	} else {
		r0 = ret.Get(0).(entity.Categorization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Categorization) error); ok {
		r1 = rf(categorization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNumberCategorization interface {
	mock.TestingT
	Cleanup(func())
}

// NewNumberCategorization creates a new instance of NumberCategorization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNumberCategorization(t mockConstructorTestingTNewNumberCategorization) *NumberCategorization {
	mock := &NumberCategorization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
